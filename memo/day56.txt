day56
웹개발4 3일차(js 3일차)
연산자 -> 제어문 -> 프로그래밍 패러다임 -> 함수 -> 배열

1. 연산자
1) 이항연산자
   연산자를 기준으로 피 연산자(항2개)가 2개인 것을 의미

- 산술연산자(+, -, *, /, %)
      자바와 동일
      %는 나머지 연산자
      + 문자와 문자는 연결, 문자와 숫자 연결, 
        숫자와 숫자와 문자 숫자끼리 연산 문자열 연결, 숫자와 숫자 연산

- 할당연산자
   자바와 동일
   +=
   -=
   *=
   ...

- 쉬프트연산자
   a << b
   피연산자 << 비트수
   피연산자를 명시한 비트수만큼 이동시킨다
   ~ 쉬프트 부정연산자

- 관계연산자(조건식은 딱 하나만 쓸 수 있다)
   >, <, >=, <=    자바와 동일
   ==   동등비교연산자, 값만 같은지
   ===   일치비교연산자, 값과 타입이 같은지
   !=   부등비교연산자, 값만 다른지
   !==   불일치비교연산자, 값과 타입이 다른지

- 논리연산자
   ||   논리합(or) : 둘 중 하나라도 true면 ture
      조건식 || 값   사용되었을경우, 값이 false일 때 || 초기값
   &&   논리곱(and) : 둘 다 true여야만 true
      선행조건식이 true면 뒤에 있는 값이 실행된다
      성능을 위해서 앞에 있는 조건식 false라면 뒤에 있는 문장을 실행하지 않는다
   부정(not)   !true 일 때 false, !false 이면 true
   ??   병합연산자 : null 또는 undefined인 경우에만 오른쪽 값을 반환한다
      "?." : 옵션널체이닝(Optional Chanining)
      객체에서 undeifned나 null에 접근할 경우 에러가 발생한다
      안전하게 객체의 프로퍼티에 접근하기 위해서 사용한다

- 대입(할당)연산자
   자바와 동일   
   =

2. 제어문
1) 조건문
  if 문 -> 관계연산자로 조건을 비교할때
  switch문 -> 하나의 변수에 여러 값이 담길 수 있을 때
2) 반복문
  for문 -> 반복횟수를 알 떄 , 범위를 알 때
  while문 -> 반복 횟수를 알지 못할 때, 조건이 주어졌을 때
  do ~ while문 -> 무조건 한 번 실행해야만 한 뒤 조건에 따라 반복 할 때
3) 기타제어문
  break문 -> 강제탈출(반복문), switch 문 case마다 종료하기 위해 break
  continue문 -> 다음 반복으로 넘어갈 때, 아래문장 스킵

3. 문자열 사용하기
  문자열 값을 다른 값과 함께 표현하는 방법
    - 문자열의 연결을 이용한다
    - 템플릿 문자열을 사용한다.(백틱사용)
      let name = '홍길동';
      console.log('제이름은' + name + '입니다');
      console.log(`제이름은 ${name} 입니다`);

4. 배열
  자바 스크립트의 배열은 배열처럼 보이고 배열처럼 사용하지만, 리스트에 가깝다
  배열이 저장하는 값을 요소(element)라고 부르며 요소로 저장하는 값은 원시타입 값 뿐만 아니라 객체타입도 가능하다


1) 배열 생성
  let ar1 = [1,2,3,'가',true];
  let ar2 = new Array(10); // 생성자 함수

5. 프로그래밍 패러다임
  개발자에게 프로그래머로서 관심을 갖게하고 결정하는 역할 - 개발방법

1) 패러다임의 종류 - 명령형
  - 절차 이향형 : 순서를 중요시하고 컴퓨터의 처리 구조와 비슷하게 개발
                속도가 빠르다(C, Cobol, ..)
  - 객체 지향형 : 객체의 상호작용을 중요시하며 유지보수가 용이하다
                (java, c++, ..)

2) 패러다임의 종류 - 선언형
  - 무엇을 할 것인지가 중요한 개발
  - 순수 함수를 조합하고 프로그래밍하는 방식
  - 함수지향 프로그래밍(javascript)

  순수함수 : 입력값에만 의존하고, 부수효과에 영향을 미치지 않는다.
  불변성 : 함수 밖에서 데이터의 변형을 일으켜서는 안된다
          또한 객체가 생성된 이후 그 상태를 변경할 수 없는것을 의미한다.
  모듈화 : 코드 블록으로 감싸져있는 문으로 하나의 실행 단위

6. 함수(function)
   코드 블록으로 감싸져있는 문으로 이루어진 하나의 실행 단위
   자바스크립트의 함수는 일급객체이다(일급객체 : 값으로 사용할 수 있는 것을 의미한다)
   즉, 함수는 객체 타입의 값이며 변수에 저장하거나 매개변수로 전달하거나 반환하는 것이 가능하다

함수 명명
   showMessage(...) //메시지를 보여줌
   getAge(...) //나이를 반환함
   setName(...) //이름을 넣음

함수의 규칙
   함수는 동작하나만 담당해야한다(모듈화)
   함수는 함수 이름에 언급되어있는 동작을 정확히 수행해야한다
   그 이외의 동작은 수행해서는 안된다
   독립적인 두개의 동작은 독립된 함수 두개에서 나눠서 수행할 수 있게 해야한다

1) 일반함수 정의
   function 식별자(매개변수1, 매개변수2){
      코드작성
      return 리턴값;
   }

function : 함수 선언표시
식별자 : 함수의 기능을 의미할 수 있는 동사로 작성
parameter : 매개변수(인자), 여러개 있을 때는 콤마로 분리하고 자료형을 따로 작성하지 않는다
return : 함수 실행 종료 후 리턴값을 반환한다

매개변수(인자, 파라미터,  parameter) : 매개변수(함수 선언부)
인수(아규먼트, argument) : 매개변수에 들어가는 값(함수 사용부, 호출부)

- 디폴트 매개변수 : 매개변수가 여러개 있을 경우 맨 뒤에서부터 기본값을 설정해줘야한다
      ex) function info1(name, gender, age=10){}

- 가변 매개변수 : 인수가 몇개가 들어올지 모를 때 사용한다
      배열로 만들어진다(for문과 빠른 for문 사용가능)
      
      ex) function info2(...person){}

- 동적바인딩 : 컴파일 시 값에 따라 자료형이 동적으로 결정되는 것을 의미한다

2) 익명함수 정의
  이름이 없는 함수이며 보통 변수에 저장해서 사용한다
  
  let  변수명 = function (매개변수){
    실행할코드;
    return 반환값;
  };

3) 콜백함수 ★★★
  함수의 매개변수로 전달되는 함수를 의미한다.
  모듈화를 시키기 위해서 원하는 곳에서 실행하기 위해 사용한다.(재사용성)