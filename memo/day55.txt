day55
웹개발4 2일차(js 2일차)
---------------------------------------------------------------
휴강일 -> 8/23/금 	
보강일 -> 8/30/금
---------------------------------------------------------------
기본 문법 -> 변수 -> 형변환 -> 연산자 -> 제어문

1. 기본문법
1) 데이터 타입
- 원시타입
	숫자타입(number) : 정수, 실수 구분없이 숫자 타입
		ex) 50, -50, -3.12, 3.14, ...
		Infinity(무한), NaN(Not a Number 숫자가 아니어서 연산 불가) 특별한 값도 포함된다		

		자바에서는 int, long, double, float
		오라클에서는 number

	논리타입(boolean) : 참, 거짓 값을 나타내는 논리형 타입
		ex) true, false
		
		자바 : boolean
		오라클 : x
	
	문자열타입(string) : 문자열을 나타낼 때 "", '', ``(백틱)을 사용한다
		ex) '안녕하세요', "javascript", `hello`, ..
	undefined : 타입이 정해지지 않은 것을 의미한다
		ex) undefined 값만 존재한다
	null : 값이 정해지지 않은 값이다, 의도적으로 값이 없음을 의미하는 값
		ex) null 값만 존재한다
	Symbol : 고유하고 변경불가능한 값을 생성하는 타입, 주로 객체의 속성키로 사용된다

- 객체타입
	자바스크립트 여러 언어의 영향을 받았다
	명령형, 함수형, 객체 지향형을 지원하는 멀티패러다임 프로그래밍 언어이다
	자바스크립트를 구성하는 거의 모든 것이 객체이다
	object : 객체 타입 키-값 쌍으로 이루어진 구조
	array : 순서가 있는 값들의 목록
	function : 코드 블록을 정의하고 호출할 수 있는 객체

2. 변수
0) java에서의 변수 선언
	자료형 변수명;
	변수명 = 값;

	자료형 변수명 = 값;

1) javascript에서의 변수 선언
	var 변수명 = 값;
	let 변수명 = 값;

+) 상수선언 	const 상수명 = 값;

	var는 ES6 이전에 주로 사용되던 변수 선언 키워드, 함수 스코프를 가진다
	var로 선언된 변수가 함수 내에서만 지역변수로 작동하고 함수 외부에서는 전역변수로 작동된다

	let, const는 ES6에서 도입된 변수 선언 키워드, 블록 스코프를 가진다
	let, const 키워드로 선언된 변수가 {}중괄호로 둘러싸인 블록 내에서만 유효하다는 것을 의미한다

+) 변수와 상수 선언
	자바스크립트는 자바와 달리 변수나 상수를 만들 때 자료형을 명시하지 않는다
	변수에 값이 저장될 때 값의 자료형에 따라 변수의 타입이 정해지게 되고 이를 동적바인딩이라고 한다

+) var 키워드의 단점
	var 키워드를 사용하여 만든 변수는 함수 레벨 스코프를 지원한다는 것이다
	그러므로 변수를 선언할 때 let을 사용하는 것을 권장한다
	
	함수레벨 스코프 : 변수가 만들어진 함수 영역의 전체에서 유효함
	블록레벨 스코프 : 변수가 만들어진 {} 영역에서만 유효함

+) var, let
	var
		함수레벨 스코프 : 함수 내 어디서든 접근 가능
		재선언 가능 : 같은 스코프 내에서 동일한 변수 이름을 여러번 선언 가능
		초기화 전 접근가능 : 변수가 선언되기 전에 접근하면 undefined 값을 가짐

	let
		블록레벨 스코프 : {}중괄호 내에서만 접근 가능
		재선언 불가 : 같은 스코프 내에서 동일한 변수 이름을 다시 선언할 수 없음
		초기화 전 접근불가 : 변수가 선언되기 전에 접근하면 참조에러(Reference Error) 발생함

2) 호이스팅
	자바스크립트의 변수, 함수 등 모든 선언문은 코드 실행단계 이전에 먼저 실행이 된다
	이러한 특징을 호이스팅이라고 한다
	var키워드로 변수를 만들면 호이스팅과 동시에 undefined로 초기화를 시킨다
	let키워드로 변수를 만들면 호이스팅은 되지만 초기화 시키지 않는다(나중에 초기화 됨)

	함수가 실행되기 전에 자바스크립트 paser가 함수 실행 전 해당 함수를 훑는 과정에서
	함수 내에서 존재하는 내용 중 함수가 실행에 필요한 값들을 끌어올리는 것이다

3) 상수
	const 키워드
	const 상수명 = 값;
	값을 변경할 수 없어야할 때 사용한다
	let 과 호이스팅 동작방식이 같고 값을 변경할 수 없다

3. 형변환
	타입 확인하는 연산자 : typeof x
	타입 확인하는 함수 : typeof(x)

	함수와 연산자에 전달되는 값은 자동 형변환
	alert() 전달받은 값의 자료형과 관계없이 문자열로 자동형변환
	수학관련 연산자가 전달받은 값은 숫자타입으로 자동형변환

- 문자형변환
	alert(value) //value 문자형이어야한다
		//value가 문자형이 아닌 숫자타입, 논리형 타입 등 다른 자료형의 값을 전달받으면 문자형으로 자동변환
	String(value) //String()함수를 호출해 전달받은 값을 문자열로 변환가능

- 숫자형변환
	alert("6"/"3") //결과는 3 문자열이 숫자형으로 자동 변환된 후 연산이 수행된다
	Number(value) // Number()함수를 호출해 전달받은 값을 숫자형으로 명시하여 변환가능

- 불린형 변환
	Boolean(value)
	
	숫자 0, 빈문자열 "", null, undefined, NaN => 비어있는 값 false
	비어있는 값을 제외한 모든 값 => true
	"0", " " => true 	

	* java에서의 false 값 확인할 것

4. alert(), confirm(), prompt()
	웹 페이지에서 사용자와 상호작용하기 위해 사용되는 간단한 대화상자를 만드는 데 사용된다
	- alert() : 단순한 정보를 사용자에게 표시하기 위해 사용된다
		사용자가 확인 버튼을 클릭하기 전까지는 아무 작업도 할 수 없다
	- confirm() : 사용자에게 "예" or "아니오"선택지를 제공하는 대화상자
		사용자가 선택을 하고 나면 해당 선택에 따라 다른 작업을 수행할 수 있다
	- prompt() : 사용자에게 입력받을 수 있는 칸을 제공하는 대화상자
		사용자가 입력할 수 있는 칸이 있고 "확인", "취소"선택지가 존재하여 다른 작업을 수행할 수 있다

5. 연산자(Operator)
	최단산쉬관리삼대

1) 최우선연산자
	자바와 동일
	10 * 2 + 2 => 22
	10 * (2 + 2) => 40

2) 단항연산자
	자바와 동일
	연산자를 기준으로 피연산자(항1개)가 1개인것을 의미
	++	값이 1씩 증가
	--	값이 1씩 감소
	+	양수
	-	음수

	전위연산자
		전위형 ++num
		후위형 num++
	부정연산자
		!true => false

3) 이항연산자
	연산자를 기준으로 피 연산자(항2개)가 2개인 것을 의미

	- 산술연산자(+, -, *, /, %)
		자바와 동일
		%는 나머지 연산자
		+ 문자와 문자는 연결, 문자와 숫자 연결, 숫자와 숫자와 문자 숫자끼리 연산 문자열 연결, 숫자와 숫자 연산

	- 할당연산자
		자바와 동일
		+=
		-=
		*=
		...
	- 쉬프트연산자
	- 관계연산자
	- 논리연산자
	- 대입(할당)연산자
		자바와 모두 동일 다른 부분들은 다음시간에 진행(관계연산자부터 진행)




















